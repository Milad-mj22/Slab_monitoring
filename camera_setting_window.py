# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'eror_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys


from PyQt5.QtGui import *
from PyQt5.QtGui import *
from PyQt5.QtGui import *
from pyqt5_plugins import *
from PyQt5 import QtCore
import sqlite3
from sqlite3 import Error

from PySide6.QtCore import *
from PySide6.QtUiTools import loadUiType
from PySide6.QtWidgets import *
#from qr_code import *
import detect_lenguage

from pylon2 import get_names
import camera


conn = sqlite3.connect('settings.db')
cur = conn.cursor()


ui2, _ = loadUiType("camera_setting.ui")




class UI_camera_setting_window(QMainWindow, ui2):
    cam_1,cam_2,cam_3,cam_4,file_path=0,0,0,0,0
    global widgets
    widgets_eror = ui2
    image_glob=0
    def __init__(self):
        super(UI_camera_setting_window, self).__init__()
        self.setupUi(self)
        # Remove default frame
        flags = Qt.WindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.pos_ = self.pos()
        self.setWindowFlags(flags)
        self.activate_()
        self.add_combo()

        #self.set_text()
        # self.database()
        self.set_language()
        self.database()

        
        self._old_pos = None

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self._old_pos = event.pos()

    def mouseReleaseEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self._old_pos = None

    def mouseMoveEvent(self, event):
        if not self._old_pos:
            return
        delta = event.pos() - self._old_pos
        self.move(self.pos() + delta)



        
     #   sys.exit(app.exec())
   # def set_text(self,msg='EROR'):
      #  self.label.setText(msg)
    def add_combo(self):

        obj=camera.Collector()
        list_cam=obj.serialnumber()
        # print(list_cam)
        self.comboBox_1.addItems(list_cam)
        self.comboBox_2.addItems(list_cam)
        self.comboBox_3.addItems(list_cam)
        self.comboBox_4.addItems(list_cam)
        cur.execute('select * from cameras_serial')
        records = cur.fetchall()

        self.comboBox_1.setCurrentText(str(records[0][0]))
        # print(str(records[0][3]))
        self.comboBox_1.setCurrentText(str(records[0][0]))
        self.comboBox_2.setCurrentText(str(records[0][1]))
        self.comboBox_3.setCurrentText(str(records[0][2]))
        self.comboBox_4.setCurrentText(str(records[0][3]))
        


    def activate_(self):
        
        self.save_close_btn.clicked.connect(self.save_close_win)
        self.close_btn.clicked.connect(self.close_win)
        self.help_btn.clicked.connect(self.help_win)

    def set_language(self):
        if detect_lenguage.language()=='Persian(فارسی)':
           # self.comboBox_1.setLayoutDirection(Qt.RightToLeft)
            detect_lenguage.camera_setting(self)
    def help_win(self):
        #self.window = UI_qr_code()
       # self.ui2= UI_eror_window()
        self.window.show()
    def close_win(self):
        
        self.close()


    def save_close_win(self):
      #  print(self.cam_1)
        camera_list=['cameras','cameras','cameras','cameras']

        sql = "UPDATE {} SET gain = '{}' WHERE sn = '{}'".format(camera_list[0],self.line_gain_cam_1.text(),'23961540')
        cur.execute(sql) 
        sql = "UPDATE {} SET exposure = '{}' WHERE sn = '{}'".format(camera_list[0],self.line_exposure_cam_1.text(),'23961540')
        cur.execute(sql) 
        sql = "UPDATE {} SET inter_packet_delay = '{}' WHERE sn = '{}'".format(camera_list[0],self.line_bandwight_cam_1.text(),'23961540')
        cur.execute(sql) 
        sql = "UPDATE {} SET width = '{}' WHERE sn = '{}'".format(camera_list[0],self.line_width_cam_1.text(),'23961540')
        cur.execute(sql) 
        sql = "UPDATE {} SET height = '{}' WHERE sn = '{}'".format(camera_list[0],self.line_height_cam_1.text(),'23961540')
        cur.execute(sql) 
        sql = "UPDATE {} SET offset_x = '{}' WHERE sn = '{}'".format(camera_list[0],self.line_offset_x_cam_1.text(),'23961540')
        cur.execute(sql) 
        sql = "UPDATE {} SET offset_y = '{}' WHERE sn = '{}'".format(camera_list[0],self.line_offset_y_cam_1.text(),'23961540')
        cur.execute(sql) 


        sql = "UPDATE {} SET gain = '{}' WHERE sn = '{}'".format(camera_list[1],self.line_gain_cam_2.text(),'23961515')
        cur.execute(sql) 
        sql = "UPDATE {} SET exposure = '{}' WHERE sn = '{}'".format(camera_list[1],self.line_exposure_cam_2.text(),'23961515')
        cur.execute(sql) 
        sql = "UPDATE {} SET inter_packet_delay = '{}' WHERE sn = '{}'".format(camera_list[1],self.line_bandwight_cam_2.text(),'23961515')
        cur.execute(sql) 
        sql = "UPDATE {} SET width = '{}' WHERE sn = '{}'".format(camera_list[1],self.line_width_cam_2.text(),'23961515')
        cur.execute(sql) 
        sql = "UPDATE {} SET height = '{}' WHERE sn = '{}'".format(camera_list[1],self.line_height_cam_2.text(),'23961515')
        cur.execute(sql)
        sql = "UPDATE {} SET offset_x = '{}' WHERE sn = '{}'".format(camera_list[1],self.line_offset_x_cam_2.text(),'23961515')
        cur.execute(sql) 
        sql = "UPDATE {} SET offset_y = '{}' WHERE sn = '{}'".format(camera_list[1],self.line_offset_y_cam_2.text(),'23961515')
        cur.execute(sql) 


        sql = "UPDATE {} SET gain = '{}' WHERE sn = '{}'".format(camera_list[2],self.line_gain_cam_3.text(),'40150886')
        cur.execute(sql) 
        sql = "UPDATE {} SET exposure = '{}' WHERE sn = '{}'".format(camera_list[2],self.line_exposure_cam_3.text(),'40150886')
        cur.execute(sql) 
        sql = "UPDATE {} SET inter_packet_delay = '{}' WHERE sn = '{}'".format(camera_list[2],self.line_bandwight_cam_3.text(),'40150886')
        cur.execute(sql) 
        sql = "UPDATE {} SET width = '{}' WHERE sn = '{}'".format(camera_list[2],self.line_width_cam_3.text(),'40150886')
        cur.execute(sql) 
        sql = "UPDATE {} SET height = '{}' WHERE sn = '{}'".format(camera_list[2],self.line_height_cam_3.text(),'40150886')
        cur.execute(sql)
        sql = "UPDATE {} SET offset_x = '{}' WHERE sn = '{}'".format(camera_list[2],self.line_offset_x_cam_3.text(),'40150886')
        cur.execute(sql) 
        sql = "UPDATE {} SET offset_y = '{}' WHERE sn = '{}'".format(camera_list[2],self.line_offset_y_cam_3.text(),'40150886')
        cur.execute(sql) 

        sql = "UPDATE {} SET gain = '{}' WHERE sn = '{}'".format(camera_list[3],self.line_gain_cam_4.text(),'23905933')
        cur.execute(sql) 
        sql = "UPDATE {} SET exposure = '{}' WHERE sn = '{}'".format(camera_list[3],self.line_exposure_cam_4.text(),'23905933')
        cur.execute(sql) 
        sql = "UPDATE {} SET inter_packet_delay = '{}' WHERE sn = '{}'".format(camera_list[3],self.line_bandwight_cam_4.text(),'23905933')
        cur.execute(sql) 
        sql = "UPDATE {} SET width = '{}' WHERE sn = '{}'".format(camera_list[3],self.line_width_cam_4.text(),'23905933')
        cur.execute(sql) 
        sql = "UPDATE {} SET height = '{}' WHERE sn = '{}'".format(camera_list[3],self.line_height_cam_4.text(),'23905933')
        cur.execute(sql)
        sql = "UPDATE {} SET offset_x = '{}' WHERE sn = '{}'".format(camera_list[3],self.line_offset_x_cam_4.text(),'23905933')
        cur.execute(sql) 
        sql = "UPDATE {} SET offset_y = '{}' WHERE sn = '{}'".format(camera_list[3],self.line_offset_y_cam_4.text(),'23905933')
        cur.execute(sql) 

        # text=self.comboBox_1.currentText()
        # sql="UPDATE 'cameras_serial' SET cam_1 = '{}'".format(text)
        # cur.execute(sql) 
        # text=self.comboBox_2.currentText()
        # sql="UPDATE 'cameras_serial' SET cam_2 = '{}'".format(text)
        # cur.execute(sql) 
        # text=self.comboBox_3.currentText()
        # sql="UPDATE 'cameras_serial' SET cam_3 = '{}'".format(text)
        # cur.execute(sql) 
        # text=self.comboBox_4.currentText()
        # print('text',text)
        # sql="UPDATE 'cameras_serial' SET cam_4 = '{}'".format(text)
        # cur.execute(sql) 

        conn.commit()
        self.close()


    def database(self):

    #camera_1------------------
        cur.execute('select * from cameras')
        records = cur.fetchall()
           # self.name_cam_1=records[0]
        self.gain_cam_1=records[0][0]
        self.exposure_cam_1=records[0][1]
        self.bandwight_cam_1=records[0][2]
        self.width_cam_1=records[0][3]
        self.height_cam_1=records[0][4]
        self.offset_x_cam_1=records[0][8]
        self.offset_y_cam_1=records[0][9]
        self.line_gain_cam_1.setText(str(self.gain_cam_1))
        self.line_exposure_cam_1.setText(str(self.exposure_cam_1))
        self.line_bandwight_cam_1.setText(str(self.bandwight_cam_1))
        self.line_width_cam_1.setValue(int(self.width_cam_1))
        self.line_height_cam_1.setValue(int(self.height_cam_1))
        self.line_offset_x_cam_1.setValue(int(self.offset_x_cam_1))
        self.line_offset_y_cam_1.setValue(int(self.offset_y_cam_1))
    #camera_2------------------    

        self.gain_cam_2=records[1][0]
        self.exposure_cam_2=records[1][1]
        self.bandwight_cam_2=records[1][2]
        self.width_cam_2=records[1][3]
        self.height_cam_2=records[1][4]
        self.offset_x_cam_2=records[1][8]
        self.offset_y_cam_2=records[1][9]
        self.line_gain_cam_2.setText(str(self.gain_cam_2))
        self.line_exposure_cam_2.setText(str(self.exposure_cam_2))
        self.line_bandwight_cam_2.setText(str(self.bandwight_cam_2))
        self.line_width_cam_2.setValue(int(self.width_cam_2))
        self.line_height_cam_2.setValue(int(self.height_cam_2))
        self.line_offset_x_cam_2.setValue(int(self.offset_x_cam_2))
        self.line_offset_y_cam_2.setValue(int(self.offset_y_cam_2))
    #camera_3------------------    

        self.gain_cam_3=records[2][0]
        self.exposure_cam_3=records[2][1]
        self.bandwight_cam_3=records[2][2]
        self.width_cam_3=records[2][3]
        self.height_cam_3=records[2][4]
        self.offset_x_cam_3=records[2][8]
        self.offset_y_cam_3=records[2][9]
        self.line_gain_cam_3.setText(str(self.gain_cam_3))
        self.line_exposure_cam_3.setText(str(self.exposure_cam_3))
        self.line_bandwight_cam_3.setText(str(self.bandwight_cam_3))
        self.line_width_cam_3.setValue(int(self.width_cam_3))
        self.line_height_cam_3.setValue(int(self.height_cam_3))
        self.line_offset_x_cam_3.setValue(int(self.offset_x_cam_3))
        self.line_offset_y_cam_3.setValue(int(self.offset_y_cam_3))
    #camera_4------------------    

        self.gain_cam_4=records[3][0]
        self.exposure_cam_4=records[3][1]
        self.bandwight_cam_4=records[3][2]
        self.width_cam_4=records[3][3]
        self.height_cam_4=records[3][4]
        self.offset_x_cam_4=records[3][8]
        self.offset_y_cam_4=records[3][9]
        self.line_gain_cam_4.setText(str(self.gain_cam_4))
        self.line_exposure_cam_4.setText(str(self.exposure_cam_4))
        self.line_bandwight_cam_4.setText(str(self.bandwight_cam_4))
        self.line_width_cam_4.setValue(int(self.width_cam_4))
        self.line_height_cam_4.setValue(int(self.height_cam_4))
        self.line_offset_x_cam_4.setValue(int(self.offset_x_cam_4))
        self.line_offset_y_cam_4.setValue(int(self.offset_y_cam_4))
        


if __name__ == "__main__":
    app = QApplication()
    win = UI_camera_setting_window()
    win.show()
    sys.exit(app.exec())
