# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'eror_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys


from PyQt5.QtGui import *
from PyQt5.QtGui import *
from PyQt5.QtGui import *
import cv2
from pyqt5_plugins import *
from PyQt5 import QtCore,QtGui

from PySide6.QtCore import *
from PySide6.QtUiTools import loadUiType
from PySide6.QtWidgets import *


import main_window


ui2, _ = loadUiType("load_window.ui")


class UI_backup_window(QMainWindow, ui2):
    global widgets
    widgets_eror = ui2
    image_glob=0
    close_sign=0
    def __init__(self):
        super(UI_backup_window, self).__init__()
        self.setupUi(self)
        # Remove default frame
        flags = Qt.WindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.pos_ = self.pos()
        self.setWindowFlags(flags)


        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setWindowOpacity(0.8)

        radius = 30
        self.centralwidget.setStyleSheet(
            """
            background:rgb(255,255,255);
            border-top-left-radius:{0}px;
            border-bottom-left-radius:{0}px;
            border-top-right-radius:{0}px;
            border-bottom-right-radius:{0}px;
            """.format(radius)
        )

        # creating a opacity effect
        self.opacity_effect = QGraphicsOpacityEffect()
  
        # setting opacity level
        self.opacity_effect.setOpacity(0.9)
  
        # adding opacity effect to the label
        self.label.setGraphicsEffect(self.opacity_effect)

        self._old_pos = None



        self.progressBar.setStyleSheet(u"QProgressBar {\n"
"	\n"
"	background-color: Transparent;\n"
"	color: rgb(200, 200, 200);\n"
"	border-style: none;\n"
"	border-radius: 10px;\n"
"	text-align: center;\n"
"}\n"
"QProgressBar::chunk{\n"
"	border-radius: 10px;\n"
"	background-color: qlineargradient(spread:pad, x1:0, y1:0.511364, x2:1, y2:0.523, stop:0 #2D31FA, stop:1 #051367);\n"
"}")




        ## QTIMER ==> START
        self.counter=0
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.progress)
        self.timer.start(30) # update every second
        # self.timer = QtCore.QTimer()
        # self.timer.timeout.connect(self.progress)
        # # TIMER IN MILLISECONDS
        # self.timer.start(35)

        self.label_texts=['Loading Cameras','Loading Databases','Loading User Interface', '          Runing']
        self.index=0

        self.timer_2 = QTimer(self)
        self.timer_2.timeout.connect(self.set_text)
        self.timer_2.start(700)


    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self._old_pos = event.pos()

    def mouseReleaseEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self._old_pos = None

    def mouseMoveEvent(self, event):
        if not self._old_pos:
            return
        delta = event.pos() - self._old_pos
        self.move(self.pos() + delta)
     #   sys.exit(app.exec())


    def set_text(self):
        self.label_4.setText(str(self.label_texts[self.index]))
        self.index+=1


    def progress(self):

        

        # SET VALUE TO PROGRESS BAR
        self.progressBar.setValue(self.counter)

        # CLOSE SPLASH SCREE AND OPEN APP
        if self.counter > 100:
            # STOP TIMER
            self.timer.stop()
            self.timer_2.stop()
            cv2.waitKey(500)
            self.close()
            #del self.app
        #    sys.exit(self.app.exec())
          #  self.app.exec_()
         #   self.app=QApplication(sys.argv)
            # self.win = Ui_MainWindow()
            # self.win.show()

            # SHOW MAIN WINDOW
            # self.main = main_window.UI_main_window()
            # self.main.show()
            

            # CLOSE SPLASH SCREEN
            

        # INCREASE COUNTER
        self.counter += 1


if __name__ == "__main__":
    app = QApplication()
    win = UI_backup_window()
    # win.setWindowOpacity(.60)
    # mw.show()
    # app.setStyleSheet("""
                            
    #                             margin: 10px;
    #                             border: 1px solid black;
    #                             border-radius: 20px;
                           
    #                         """)
    win.show()

    sys.exit(app.exec())









# import sys
# from PyQt5 import QtCore, QtWidgets, QtGui


# class main(QtWidgets.QDialog):
#     def __init__(self):
#         super(main, self).__init__()
#         self.setMinimumSize(800,500)


#         self.setWindowFlags(
#             self.windowFlags() | QtCore.Qt.FramelessWindowHint
#         )

#         # self.setAttribute(QtCore.Qt.WA_TranslucentBackground,on=True)


# if __name__ == "__main__":
#     app = QtWidgets.QApplication(sys.argv)
#     mw = main()
#     mw.setWindowOpacity(.60)
#     mw.show()
#     sys.exit(app.exec())
