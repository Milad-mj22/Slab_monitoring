# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'eror_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from cgitb import reset
import sys




from eror_window import *
from main_window import *

import detect_lenguage

import sys


from PyQt5.QtGui import *
from PyQt5.QtGui import *
from PyQt5.QtGui import *
from pyqt5_plugins import *
from PyQt5 import QtCore
import sqlite3

from PySide6.QtCore import *
from PySide6.QtUiTools import loadUiType
from PySide6.QtWidgets import *
import detect_lenguage


ui2, _ = loadUiType("login.ui")




class UI_login_window(QMainWindow, ui2):
    cam_1,cam_2,cam_3,cam_4,file_path=0,0,0,0,0
    global widgets
    widgets_eror = ui2
    image_glob=0
    clsoe_sign=0
    def __init__(self):
        super(UI_login_window, self).__init__()
        self.setupUi(self)
        # Remove default frame
        flags = Qt.WindowFlags(Qt.FramelessWindowHint )
        self.pos_ = self.pos()
        self.setWindowFlags(flags)
        self.activate_()
        #self.set_text()
        self.id=0
        self.set_language()
        self.lineEdit_2.setEchoMode(QLineEdit.Password)


        
     #   sys.exit(app.exec())
   # def set_text(self,msg='EROR'):
      #  self.label.setText(msg)
    def activate_(self):
        self.close_btn.clicked.connect(self.close_win)
        self.login_btn.clicked.connect(self.login)
    def close_win(self):
        self.close()

    def set_language(self):
        if detect_lenguage.language()=='Persian(فارسی)':
            detect_lenguage.login_window(self)


    def login(self):
        print('asdqwe')
        conn=self.create_connection('settings.db')
        cur = conn.cursor()
        cur.execute('select * from login')
        records = cur.fetchall()
        print('user',self.lineEdit.text())
        #print(records)
        try:
            query = 'SELECT password FROM login WHERE ID =\''+self.lineEdit.text()+"\'"
            cur.execute(query)
            self.label_2.setText("invalid Username or Password")
        except Error as e:
            print('eror')
        try:
            result_pass = cur.fetchone()[0]
        except:
            result_pass='!@#$%^&*()'
        print(str(result_pass),self.lineEdit_2.text(),str(result_pass) == self.lineEdit_2.text())
        if str(result_pass) == self.lineEdit_2.text():
            
            print("Successfully logged in.")
            self.label_2.setText("loged in")
            id=self.lineEdit.text()
            self.close()
            return id
        else:
            ret="Guest"
            self.label_2.setText('Invalid Username or Password')
            return ret

    def eror_window(self,msg,level):
        self.window = UI_eror_window()
       # self.ui2= UI_eror_window()
        self.window.show()
        self.window.set_text(msg,level)
        #self.close_sign=self.window.close_sign


             
    def create_connection(self,db_file):
        """ create a database connection to the SQLite database
            specified by db_file
        :param db_file: database file
        :return: Connection object or None
        """
        conn = None
        try:
            conn = sqlite3.connect(db_file)
            return conn
        except Error as e:
            print(e)
            self.eror_window(msg=' NO connection to database {}'.format(db_file),level=3)
 

if __name__ == "__main__":
    app = QApplication()
    win = UI_login_window()
    win.show()
    sys.exit(app.exec())
